;;; -*- Mode:LISP; Package:auto -*-
;;; ******************************************************************* ;;;
;;;         (c) Copyrighted 1988 by Carnegie Mellon University.         ;;;
;;;                        All rights reserved.                         ;;;
;;;         This code was written as part of the TPS project.           ;;;
;;;   If you want to use this code or any part of TPS, please contact   ;;;
;;;               Peter B. Andrews (Andrews@CS.CMU.EDU)                 ;;;
;;; ******************************************************************* ;;;

(in-package :auto)
(part-of auto-basic)

(deffile node
  (part-of auto-basic)
  (mhelp "Definitions, Functions, etc., needed by unification, mating search,
	 etc."))

(context unification)
(defun first-order-var (var)
  (let ((type (unabbreviated-type var)))
    (not (or (consp type) (eq type 'core::O)))))

(defstruct (node (:print-function print-uni-node))
  dpairs
  (old-dpairs nil)
  (sons nil)
  subst-stack
  (print-name "" :type string)
  (measure 0 :type fixnum)
  parent
  (terminal-flag nil )
  (depth 0 :type fixnum)
  (subsumed nil) ;;name of node if subsumed.
  (connections nil)
  (neg-vars nil)
  (free-vars nil)
  (only-imitation nil)
  (sub-check nil)
  (msv nil)
  )

(defun print-uni-node (node *standard-output* *print-level*)
  (terpri) (princ (node-print-name node)) (princ (node-terminal-flag node))
  (princ " ") (princ (node-measure node)) (princ " ")
  (princ (node-neg-vars node)) (princ " ") (princ (node-depth node)) (princ " ")
  (princ (node-free-vars node)) (terpri)
  (princ (node-dpairs node)) (terpri)
  (dolist (node (node-sons node))
    (princ (node-print-name node)) (princ " "))
  (terpri) (princ (node-subst-stack node)))

(defstruct (uni-term (:print-function print-uni-term))
  head
  (args nil)
  (binder nil)
  (stack nil)
  (bdvars nil)
  (pos t ))

(defun print-uni-term (uni-term *standard-output* *print-level*)
  (when (uni-term-binder uni-term)
    (terpri) (princ "Binder:   ")
    (princ (uni-term-binder uni-term)))
  (terpri) (princ "Head:   ")
  (when (not (uni-term-pos uni-term)) (princ "~"))
  (printwffhere (uni-term-head uni-term))
  (when (uni-term-bdvars uni-term)
    (terpri) (princ "Bdvars:   ")
    (princ (uni-term-bdvars uni-term)))
  (when (uni-term-args uni-term)
    (terpri) (princ "Args:   ")
    (princ (uni-term-args uni-term)))
  (when (uni-term-stack uni-term)
    (terpri) (princ "Stack:   ")
    (princ (uni-term-stack uni-term))))

(defstruct (subst (:print-function print-subst))
  term
  (h-vars nil)
  (new-h-vars nil)
  ;;assoc-list with elements of the form (old-name . new-name)
  type ;;(head . rhead) for imitation, and n for nth projection, s if 
  ;;generated by SIMPL, f if generated by FFPAIRS, p for primitive
  ;;substitution
  )

(defun print-subst (subst *standard-output* *print-level*)
  (terpri) (princ "Term:   ") (printwffhere (subst-term subst))
  (when (subst-h-vars subst) (terpri) (princ "H-vars:   ") (princ (subst-h-vars subst)))
  (cond ((consp (subst-type subst))
	 (terpri) (princ "Substs:   ") (princ (subst-type subst))
	 (dolist (sub (subst-new-h-vars subst))
	   (princ "   ") (princ sub)))
	(t (terpri) (princ "Type:   ") (princ (subst-type subst))
	   (when (subst-new-h-vars subst)
	     (terpri) (princ "Substs:")
	     (dolist (sub (subst-new-h-vars subst))
	       (princ "   ") (princ sub))))))

(defparameter w-var-prefix (intern-str "w"))
(defparameter h-var-prefix (intern-str "h"))
(defparameter eta-var-prefix (intern-str "n"))
(defparameter initial-measure-root 0)
(defparameter very-large-number 10000)
(defparameter very-small-number -10000)
(defparameter initial-value-h-var-counter 1)
(defparameter initial-value-eta-var-counter 1)

(defflag eta-rule
  (flagtype boolean)
  (default t)
  (subjects unification transmit)
  (mhelp "If T, eta rule is permitted in the unification package.
This can be T or NIL for the UN88 procedure, but it can only be
T for the UN90 procedure. (In fact, UN90 ignores this flag.)"))

(defvar unification-toplevel nil)
(defvar current-eproof nil)

(defun sk-const-p (var)
  (unless unification-toplevel
    (dolist (pair (eproof-skolem-constants current-eproof) nil)
      (let ((elt (car pair))
            (nan (cdr pair)))
	(if (and (eq var (head elt)) (> nan 0))
	    (return nan))))))

(defflag max-search-depth
  (flagtype null-or-posinteger)
  (default nil)
  (subjects unification important transmit)
  (mhelp "If non nil, search to depth MAX-SEARCH-DEPTH, else search to
arbitrary depth. Takes precedence over all other flags that may 
control the search depth in a unification tree (i.e. no tree is ever
generated to a greater depth, although other flags may cause the 
unification search to stop temporarily at a shallower depth. Used 
in all search procedures, and in UN88 and UN90. 
See flag MAX-UTREE-DEPTH also."))

(defflag stop-at-TSN
  (flagtype boolean)
  (default T)
  (subjects unification transmit)
  (mhelp "If T the unification algorithm terminates at a terminal success 
node. Otherwise, it continues generating the tree.
This only applies to UN88."))

(defflag reduce-double-neg
  (flagtype boolean)
  (default T)
  (subjects unification transmit)
  (mhelp "If T double negations are eliminated during lambda contraction
at a unification node. This only applies in UN88."))

(defflag subsumption-check
  (flagtype boolean)
  (default nil)
  (subjects unification transmit)
  (relevancy-preconditions
   (max-substs-var (not (and max-substs-var max-substs-quick)))
   (max-substs-quick (not (and max-substs-var max-substs-quick))))
  (mhelp "Limited subsumption check should be done during unification when
this flag is set. Applies for procedures UN88 and UN90, although it is
much more useful in UN88 (UN90 does not generate as many subsumed nodes,
and so subsumption-checking tends to be a waste of time). 
See also SUBSUMPTION-NODES and SUBSUMPTION-DEPTH."))

(defflag max-utree-depth
  (flagtype null-or-posinteger)
  (default 5)
  (subjects unification important transmit)
  (mhelp "If non-NIL, maximum depth to which unification tree is to be 
generated. Used only in UN88 procedures. This variable is incremented 
during mating-search to allow unification tree to grow to 
greater depth as the search progresses. The unification tree
is, however, never searched or generated to a depth greater than
MAX-SEARCH-DEPTH provided it is non NIL and a positive integer. One can
also consider this variable to be the initial value to which unification
trees are generated during mating-search."))

(defflag min-quick-depth
  (flagtype null-or-posinteger)
  (default 3)
  (subjects unification transmit)
  (mhelp "The minimum depth to which a unification tree should be generated
when unification tree is searched only to non branching depth. Setting this
flag to 1 has the effect of generating the tree to non branching depth.
Applicable only to UN88.
MIN-QUICK-DEPTH is used only in the process of checking whether two
literals are potential mates. It is used to construct the connection graph.
See flag MAX-SEARCH-DEPTH also.
See MAX-SUBSTS-QUICK for a different way to achieve a similar effect."))

;;The lines below were added by PBA after discussion with SI, 
;;but are not part of the original documentation:
;;MIN-QUICK-DEPTH is used only in the process of checking
;;whether two literals are potential mates.
;;It is used to construct the connection graph.


(defflag imitation-first
  (flagtype boolean)
  (default t)
  (subjects unification transmit)
  (mhelp "Controls whether imitations are considered before projections during
unification procedure UN88. No effect in UN90."))

(defflag unify-verbose
  (flagtype verbose)
  (default med)
  (change-fn (lambda (flag value pvalue) 
                     (declare (ignore pvalue))
                     (if (eq value T) (set flag 'MAX)
                         (if (eq value NIL) (set flag 'SILENT)))))    
  (subjects unification mating-search ms88 ms89 ms90-3 ms90-9 ms91-6 ms91-7 ms92-9 ms93-1 transmit)
  (mhelp "Takes values SILENT=NIL, MIN, MED or MAX=T, and governs the amount
of output relating to the unification process."))


;"If T, the name of the unification node which is being considered by
;the unification algorithm is displayed."))

(defmacro rigid-p (term free-vars)
  `(or (not (memq (uni-term-head ,term) ,free-vars))
       (memq (uni-term-head ,term) (uni-term-binder ,term))))

(defflag ms-dir
  (flagtype symbol)
  (default quasi-tps1)
  (subjects mating-search ms88 ms89 ms91-6 transmit)
  (mhelp "The director to be used in mating search."))

(definfo quasi-tps1
  (mhelp "A flag setting for MS-DIR.
The only possible setting for MS-DIR, this is the main routine
which governs the behaviour of MS88 and MS89."))

(defstruct (stats (:print-function print-stats))
  (director ms-dir)			; search director used for this mating
  (num-added 0 :type integer)		; number of connections added during search
  (num-removed 0 :type integer)		; number of connections deleted during search
  (num-conns-considered 0 :type integer) ; number of connections considered during search
  (time-used         
    (cons 0 (tps-get-internal-run-time)))
					; first number is total time used during this
					; mating.  Second number is time when we
					; last began working on the mating
  (num-dupes 0 :type integer)		; number of times duplication performed
  (num-vars-duped 0 :type integer)	; total number of variables which were duplicated
  (num-primsubs 0 :type integer)	; number of primitive subs used
  (mate-subsume-tests 0 :type integer)	; number of tests made to determine if a mating
					; was subsumed by an incompatible mating
  (mate-subsume-true 0 :type integer)	; number of times such tests succeeded
  (unif-subsume-tests 0 :type integer)	; number of times a set of disagreement pairs was
					; tested to see if it was subsumed by an incompatible
					; set
  (unif-subsume-true 0 :type integer)	; number of times such tests succeeded
  )

(defun print-stats (stats out-stream level)
  (declare (ignore level))
  (let ((*standard-output* out-stream))
    (terpri) (princ "Mating director: ") (princ (stats-director stats))
    (terpri) (princ "Time used: ")
    (format nil "~F" (/ (car (stats-time-used stats))
			internal-time-units-per-second))
    (terpri) (princ "Number of connections considered: ")
    (princ (stats-num-conns-considered stats))
    (terpri) (princ "Number of connections added: ")
    (princ (stats-num-added stats))
    (terpri) (princ "Number of connections removed: ")
    (princ (stats-num-removed stats))
    (terpri) (princ "Number of times duplication done: ")
    (princ (stats-num-dupes stats))
    (terpri) (princ "Number of variables duped: ")
    (princ (stats-num-vars-duped stats))
    (terpri) (princ "Number of primitive substitutions made: ")
    (princ (stats-num-primsubs stats))
    (terpri) (princ "Number of mating subsumption checks: ")
    (princ (stats-mate-subsume-tests stats))
    (terpri) (princ "Number of mating subsumptions detected: ")
    (princ (stats-mate-subsume-true stats))
    (terpri) (princ "Number of unification subsumption checks: ")
    (princ (stats-unif-subsume-tests stats))
    (terpri) (princ "Number of unification subsumptions detected: ")
    (princ (stats-unif-subsume-true stats))
    ))

(defvar active-mating nil)
(defvar duplicated nil)
(defvar *no-internal-duplications* nil)
(defvar *test-top* nil)
(defvar *test-total-time* 0)
(defvar current-topnode nil)
(defvar ms90-3-mating nil)
(defvar non-dneggable-vars nil)

