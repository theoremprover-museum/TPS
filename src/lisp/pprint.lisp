;;; -*- Mode:LISP; Package:CORE -*-
;;; ******************************************************************* ;;;
;;;         (c) Copyrighted 1988 by Carnegie Mellon University.         ;;;
;;;                        All rights reserved.                         ;;;
;;;         This code was written as part of the TPS project.           ;;;
;;;   If you want to use this code or any part of TPS, please contact   ;;;
;;;               Peter B. Andrews (Andrews@CS.CMU.EDU)                 ;;;
;;; ******************************************************************* ;;;

(in-package :CORE)
(part-of WFF-PRINT)

;;;
;;; File PPRINT
;;;
;;; defines function used for actually printing a pplist as produced by
;;; the pretty-printing algorithm.
;;;

(deffile pprint
  (part-of wff-print)
  (extension clisp)
  (mhelp "Contents print using PPLIST generated by pretty-printing function."))

(context wff-printing)

;(proclaim '(special kset markatom lastprefindt ))


(defun aplicnlistdepth (aplicnlist)
  (if (singleaplicn aplicnlist)
      (+ (car (cdaaar aplicnlist)) (car (cdadar aplicnlist)))
      (+ (or (max-with-key aplicnlist #'cadaar) 0)
	 (or (max-with-key aplicnlist #'cadadr) 0))))

(defun atomvalterpri ()
  ;;(declare (special atomvallist atomposlist))
  (declare (special curpos *in-tex-math-mode* *in-text-display-mode*))
  ;;(cond (atomvalflag (terpri)
  ;;(for-each atompos atomposlist
  ;;(declare (special atomvallist))
  ;;(pcall print-indent atompos)
  ;;(pcall print-lsymbol (car atomvallist))
  ;;(setq atomvallist (cdr atomvallist)))
  ;;(setq atomposlist nil)))
  (setq curpos 0)
  (if (member style '(tex tex-1)) ; cebrown 4/25/02 - fixing bugs in pretty printing with TeX style
      (cond ((and *in-tex-math-mode* ppwfflag)
	     (princ "$}\\middleformula") 
	     (terpri) 
	     (princ "\\partformula{$"))
	    (*in-tex-math-mode*
	     (princ "$ \hfill\break")
	     (princ "$"))
	    (*in-tex-display-mode*
	     (princ "$$")
	     (terpri)
	     (princ "$$"))
	    (t (terpri)))
    (terpri)))

(defun genchar (x) (or (stringp x) (null (cdr x))))

(defun indentation (indent)
  (when (< indent curpos)
	 (atomvalterpri))
  ;;(setq curpos (+ curpos indent))
  (pcall print-indent indent))

(defun pp-enter-kset (ks)
  (declare (special kset))
  (if ppvirtflag
      (if (eq ks kset)
	  ppwfflist
	  (setq kset ks
	        ppwfflist
		(nconc ;;append Changed to nconc DAN
		 ppwfflist
		 (list (list (list '(27) '(106) (list (+ 32 ks))))))))
      (enter-kset ks)))

(defun pprinc (x)
  (if ppvirtflag
      (let ((str (string x)))
	(setq ppwfflist (nconc ; append Changed to nconc DAN
			 ppwfflist (list str)))
	(incf ppwfflength (length str))
	(list str))
      (princ x)))

(defun pprinc0 (x)
  (if ppvirtflag
      (let ((str (list (string x))))
	(setq ppwfflist (nconc ; append Changed to nconc DAN
			 ppwfflist str))
	str)
      (princ x)))

;*;(defun pptyo (x)
;*;  (cond (ppvirtflag (setq ppwfflength (1+ ppwfflength))
;*;		    (setq ppwfflist (append ppwfflist (list (list x)))))
;*;	(t (tyo x))))
;;; Revised to make more efficient DAN

(defun pptyo (x)
  (if ppvirtflag 
      (progn
       (incf ppwfflength)
       (setq ppwfflist (nconc ppwfflist (list (list x)))))
      (tyo x)))

(defun pptyo0 (x)
  (if ppvirtflag
      (setq ppwfflist (nconc ;append Changed to nconc DAN
		       ppwfflist (list (list x))))
      (tyo x)))

;; The following function is a MacLisp hack

;*;(defun tyoim (x)
;*;  (if ^W (tyo x)
;*;      (progn
;*;       (tyo x image-file-object)
;*;       (setcurpos (+i (curpos)))
;*;       (when ^R (let ((^W t)) (tyo x))))))

(defun pptyos (n)
  (if ppvirtflag
      (progn
       (incf ppwfflength)
       (setq ppwfflist
	     (nconc ppwfflist
		     (list '(((27) (84))) (list n) '(((27) (116)))))))
      (tyos n)))


(defun pp-lowercase (char)
  (pptyo (char-int (char-downcase (character char)))))

(defun printpplist (pplist indent)
  (declare (special lastprefindt markatom))
  (cond
   ((null (caar pplist)) nil)
   ((and atomvalflag (eq (caaar pplist) 'markatom))
    (rplaca (car pplist) (cdaar pplist))
    (setq markatom t)
    (printpplist pplist indent))
   ((< (+ indent (cdr pplist)) rightmargin)
    (indentation indent)
    (setq curpos (+ curpos (cdr pplist)))
    (sprintpplist pplist))
   ((genchar (caaar pplist))
;    (when (not (< (+ curpos (cdr pplist)) rightmargin)) ; commented - cebrown 3/11/03 - was forcing some pprinting not to indent lines
    (indentation (min (+ 2 lastprefindt)
		      (- rightmargin (cdr pplist))))
    (setq curpos (+ curpos (cdr pplist)))
    (sprintpplist pplist))
   (t (prog (newindent rspace)
	(when (cdaar pplist)
	  (setq rspace (1+ (- rightmargin (+ (cadar pplist) indent))))
	  (when (or (< rspace 0) (> (- indent lastprefindt) 30))
	    (cond ((< (+ (- indent lastprefindt 2) rspace) 0)
		   (setq indent (min indent (+ lastprefindt 2)))
		   (setq newindent (+ 2 indent))
		   (go ind))
		  (t (setq indent (+ lastprefindt 2))))))
	(setq newindent (+ indent (or (max-with-key (caar pplist) #'cdar) 0)))
	ind (when (<= indent rightmargin) (indentation indent))
	(case (cddar pplist)
	  (brackets
	   (princ "[")
	   (incf curpos)
	   (incf indent)
	   (incf newindent))
	  (dot
	   (incf curpos)
	   (princ ".")
	   (incf indent)
	   (incf newindent))
	  (space-brackets
	   (incf curpos 2)
	   (princ " [")
	   (incf indent 2)
	   (incf newindent 2))
	  (space-dot
	   (incf curpos 2)
	   (princ " .")
	   (incf indent 2)
	   (incf newindent 2)))
	(printpplist (caaaar pplist) indent)
	(when (cdaar pplist)
	      (setq lastprefindt
		    (if (and localleftflag (zerop (cdr (caaaar pplist))))
			(min curpos newindent)
			newindent)))
	(printpplist (cdaaar pplist)
		     (if (and localleftflag (zerop (cdr (caaaar pplist))))
			 (min curpos newindent)
			 newindent))
	(dolist (aplicn (cdaar pplist))
	  (if (and fillineflag
		   (< (+ curpos (cdar aplicn) (cddr aplicn)) rightmargin))
	      (progn
	       (printpplist (car aplicn) curpos)
	       (printpplist (cdr aplicn) curpos))
	      (progn
	       (atomvalterpri)
	       (printpplist (car aplicn) indent)
	       (setq lastprefindt
		     (if (< (1+ (- rightmargin curpos)) (cadadr aplicn))
			 curpos newindent))
	       (printpplist (cdr aplicn) lastprefindt))))
	(when (memq (cddar pplist) '(brackets space-brackets))
	      (setq curpos (1+ curpos))
	      (princ "]"))
	(return nil)))))

(defun singleaplicn (aplicnlist)
  (let ((x (cdr aplicnlist)))
    (if x (eq x 'markatom) t)))


(defun sprintaplicn (aplicn)
  (declare (special atomvalflag markatom atomposlist))
  (if (genchar aplicn)
      (progn
       (when (and atomvalflag markatom)
	     (setq markatom nil)
	     (setq atomposlist (nconc atomposlist (list curpos))))
       (if (consp aplicn)
	   (if (consp (car aplicn))
	       (mapc #'sprintaplicn (car aplicn))
	       (progn (tyo (car aplicn))
		      (setq pc (car aplicn))))
	   (progn (princ aplicn) (setq pc aplicn))))
      (progn (when (caaar aplicn) (sprintpplist (car aplicn)))
	     (when (caadr aplicn) (sprintpplist (cdr aplicn))))))

(defun sprintpplist (pplist)
  (declare (special markatom))
  (when (and atomvalflag (eq (caaar pplist) 'markatom))
	(rplaca (car pplist) (cdaar pplist))
	(setq markatom t))
  (case (cddar pplist) 
    (brackets (princ "["))
    (dot (princ "."))
    (space-brackets (princ " ["))
    (space-dot (princ " .")))
  (mapc #'sprintaplicn (caar pplist))
  (when (memq (cddar pplist) '(brackets space-brackets))
	(princ "]")))

