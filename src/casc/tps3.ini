;; This is the standard initialization file for TPS3.
;; Lines which are commonly useful but not part of the standard
;; initialization are commented out and start with ;*;

(in-package :cl-user)

; turn of GC messages if cmucl
#+:cmu
(setq ext:*gc-verbose* nil)

;; First Common Lisp variables
(setq *load-verbose* t)
;TPS has its own pretty-printer, 
;and there is a bug involving the Lucid CL pretty-printer, so...
(setq *print-pretty* nil)

;; USE wanted packages.
(use-package 'maint)
(use-package 'teacher)
(use-package 'ml)
(mode 'ml)
(use-package 'auto)

;; Then TPS Flags & variables
;; use setq for variables and set-flag for flags.

;; Next line because students may be using TPS3 and therefore
;; the default in TPS3 is expertflag = nil and *trap-errors* = t
(setq *trap-errors* nil)

;; You might want to put your home directory on the source-path
;*;(set-flag 'source-path `("/usr/foo/" ,@source-path))

;; If you are using X windows, uncomment out next line
;*;(set-flag 'style 'xterm)

;; If you see blinking text in xtps, try uncommenting the next line.
;; For more information, see the User Manual.
;*;(set-flag 'xterm-ansi-bold 49)

(set-flag 'save-work-p nil)
(setq *default-pathname-defaults* (pathname ""))

;;; Let's turn off these events, they are really useful only
;;; for checking students problems in ETPS
(set-flag 'advice-asked-enabled nil)
(set-flag 'command-enabled nil)
(set-flag 'done-exc-enabled nil)
(set-flag 'error-enabled nil)
(set-flag 'input-error-enabled nil)
(set-flag 'rule-error-enabled nil)

(set-flag 'default-tactic 'pfenning-tac)

;;;Example of how to set TEST-THEOREMS:
;;;(set-flag 'TEST-THEOREMS '((user::THM30 user::MODE-THM30) (user::THM47 user::MODE-THM47-G)))


;;;The following flags refer to the directory structures for your site.
;;;The default values for these flags in the LISP code will probably not
;;;be appropriate.

(set-flag 'last-mode-name "")
;;;also put a copy of the above line at the end of your 
;;;personal tps3.ini file, if you have one.

(defmode BOOL-PROP-MODE
  (flag-settings
   (ADD-TRUTH IF-NEEDED)
   (APPLY-MATCH APPLY-MATCH-ALL-FRDPAIRS)
   (COUNTSUBS-FIRST NIL)
   (DEFAULT-EXPAND NONE)
   (DEFAULT-MATE NPFD)
   (DEFAULT-MS MS88)
   (DNEG-IMITATION CONST-FLEX)
   (DUP-ALLOWED T)
   (DUPLICATION-STRATEGY DUP-OUTER)
   (DUPLICATION-STRATEGY-PFD DUP-INNER)
   (ETA-RULE T)
   (EXCLUDING-GC-TIME T)
   (FIRST-ORDER-MODE-MS T)
   (IMITATION-FIRST T)
   (INITIAL-BKTRACK-LIMIT INFINITY)
   (INTERRUPT-ENABLE T)
   (LAST-MODE-NAME "Mode : MS98-FO-MODE, but with DEFAULT-MS set to MS88, and TACTIC-VERBOSE set to MIN")
   (LEIBNIZ-SUB-CHECK NIL)
   (MATE-FFPAIR NIL)
   (MATING-VERBOSE SILENT)
   (MAX-DUP-PATHS INFINITY)
   (MAX-MATES 2)
   (MAX-PRIM-DEPTH 1)
   (MAX-PRIM-LITS 4)
   (MAX-SEARCH-DEPTH 20)
   (MAX-SEARCH-LIMIT NIL)
   (MAX-SUBSTS-PROJ NIL)
   (MAX-SUBSTS-PROJ-TOTAL NIL)
   (MAX-SUBSTS-QUICK NIL)
   (MAX-SUBSTS-VAR NIL)
   (MAX-UTREE-DEPTH 20)
   (MERGE-MINIMIZE-MATING T)
   (MIN-PRIM-DEPTH 1)
   (MIN-PRIM-LITS 2)
   (MIN-QUANT-ETREE T)
   (MIN-QUANTIFIER-SCOPE NIL)
   (MIN-QUICK-DEPTH 3)
   (MONITORFLAG NIL)
   (MS-DIR QUASI-TPS1)
   (MS-INIT-PATH NIL)
   (MS-SPLIT T)
   (MS90-3-DUP-STRATEGY 1)
   (MS90-3-QUICK NIL)
   (MS91-INTERLEAVE 5)
   (NEG-PRIM-SUB NIL)
   (NEW-MATING-AFTER-DUP NIL)
   (NUM-FRPAIRS 5)
   (NUM-OF-DUPS 2)
   (OCCURS-CHECK T)
   (ORDER-COMPONENTS T)
   (PR97C-MAX-ABBREVS 1)
   (PR97C-PRENEX T)
   (PRIM-BDTYPES ("I"))
   (PRIM-BDTYPES-AUTO REPLACE)
   (PRIM-PREFIX PRIM)
   (PRIM-QUANTIFIER T)
   (PRIMSUB-METHOD PR93)
   (PRIMSUB-VAR-SELECT T)
   (PRINT-MATING-COUNTER 300000)
   (PRINTMATEFILE "mate.mss")
   (PRINTMATEFLAG NIL)
   (PRINTMATEFLAG-SLIDES NIL)
   (PRINTMATEOPS ALWAYS-TRUE)
   (PROP-STRATEGY ALLOW-DUPLICATES)
   (PRUNING NIL)
   (QUERY-USER NIL)
   (RANK-EPROOF-FN NUM-VPATHS-RANKING)
   (RECORDFLAGS (LAST-MODE-NAME DEFAULT-MS SHORT-SITE-NAME MACHINE-TYPE LISP-IMPLEMENTATION-TYPE MAX-SEARCH-LIMIT SEARCH-TIME-LIMIT MAX-UTREE-DEPTH MAX-SEARCH-DEPTH MIN-QUICK-DEPTH INITIAL-BKTRACK-LIMIT NUM-FRPAIRS FIRST-ORDER-MODE-MS NUM-OF-DUPS MAX-MATES ORDER-COMPONENTS REWRITE-DEFNS REWRITE-EQUALITIES REMOVE-LEIBNIZ PRIM-QUANTIFIER PRIM-BDTYPES NEG-PRIM-SUB OCCURS-CHECK RANK-EPROOF-FN SKOLEM-DEFAULT MIN-QUANTIFIER-SCOPE))
   (REDUCE-DOUBLE-NEG T)
   (REMOVE-LEIBNIZ T)
   (REWRITE-DEFNS (EAGER))
   (REWRITE-EQUALITIES ALL)
   (REWRITE-EQUIVS 1)
   (RIGID-PATH-CK T)
   (RULEP-WFFEQ WFFEQ-AB)
   (SEARCH-COMPLETE-PATHS NIL)
   (SEARCH-TIME-LIMIT 60)
   (SHOW-TIME T)
   (SKOLEM-DEFAULT SK1)
   (STOP-AT-TSN T)
   (SUBSUMPTION-CHECK NIL)
   (SUBSUMPTION-DEPTH INFINITY)
   (SUBSUMPTION-NODES LP-NODES)
   (TIMING-NAMED T)
   (TOTAL-NUM-OF-DUPS NIL)
   (TRUTHVALUES-HACK NIL)
   (UNI-SEARCH-HEURISTIC BREADTH-FIRST)
   (UNIF-COUNTER 0)
   (UNIF-COUNTER-OUTPUT 0)
   (UNIF-TRIGGER NIL)
   (UNIFY-VERBOSE SILENT)
   (USE-DIY NIL)
   (USE-FAST-PROP-SEARCH T)
   (USE-RULEP T)
   (USE-SYMSIMP T))
  (mhelp "Proves all of the BOOL-PROP-* theorems except 56 and 57"))

; Specific to THF -- higher order TPTP -- Chad June 25, 2008
; set the flags via the mode
; allow user to give mode on command line switch
#+:cmu
(let ((prob (member "-prob" extensions:*command-line-strings* :test #'equal))
      (skipillformed (member "-skipillformed" extensions:*command-line-strings* :test #'equal))) ; in this case ill-formed thf will just be skipped.  Otherwise, TPS halts in the presence of ill-formed thf. - Chad, Jan 2010
  (when prob
; destroy all builtin abbreviations (except EQUIV), to prevent conflicts (e.g., with powerset or setunion)
  (catch 'fail
    (unless (and (cdr prob) (probe-file (cadr prob)))
      (format t "Could not find problem file.  Quitting.~%")
      (quit))
    (defun my-destroy-abbrev (name)
      (dolist (prop (plist name))
	(remprop name prop))
      (setq global-abbrevlist (delete name global-abbrevlist)))
    (dolist (a global-abbrevlist)
      (when (and (symbolp a) (not (eq a 'EQUIV)))
	(my-destroy-abbrev a)))

    ; stop tps from creating files and writing to files
    (defun core::write-events (event-file event-list)
      (declare (ignore event-file event-list))
      nil
      )

    (defvar start nil)
    (defvar *defdeps* nil)
    (defvar *consts* nil)
    (defvar *axioms* nil)
    (defvar *axioms-as-definitions* nil)
    (defvar *modename* 'BOOL-PROP-MODE))
    (when (member "-ad" extensions:*command-line-strings* :test #'equal)
      (setq *axioms-as-definitions* t))
    (let ((mode (member "-mode" extensions:*command-line-strings* :test #'equal)))
      (setq *modename* 'BOOL-PROP-MODE)
      (if mode
	  (if (cdr mode)
	      (let ((m (read-from-string (cadr mode))))
	        (when (probe-file (format nil "~dcasc/modes/~d.lisp" sys-dir m))
                  (load (format nil "~dcasc/modes/~d.lisp" sys-dir m)))
		(if (and (symbolp m) (get m 'flag-mode))
		    (progn
		      (setq *modename* m)
		      (mode m))
		  (progn
		    (format t "~d is not a known mode~%Using BOOL-PROP-MODE.~%" m)
		    (mode 'BOOL-PROP-MODE))))
	    (progn
	      (format t "No mode given after -mode switch.  Using BOOL-PROP-MODE.~%")
	      (mode 'BOOL-PROP-MODE)))
	(mode 'BOOL-PROP-MODE)))

    (defun const (name tp)
      (setq name (intern name))
      (when (get name 'type) (throw 'fail nil)) ; fail if name is already used - Chad - Jan 2010
      (eval (list 'def-logconst name (list 'type tp) (list 'printnotype 't)))
      (push name *consts*))

    (defun def (name trm)
      (setq name (intern name))
      (setf (get name 'LOGCONST) nil) ; if was previously declared as a constant, forget this now
      (let* ((wff (getrwff trm))
	     (tp (type wff)))
        (when (and (get name 'type) (not (equal tp (get name 'type)))) (throw 'fail nil)) ; declared type did not match inferred type - Chad - Jan 2010
	(eval (list 'def-abbrev name (list 'type (tpstr tp)) (list 'defn trm) (list 'printnotype 't)))))
  
    (defun tpstr (tp)
      (if (consp tp)
	  (format nil "(~d~d)" (tpstr (car tp)) (tpstr (cdr tp)))
	(format nil "~d" tp)))

					; displaying time with the current cmucl leads to a bug sometimes. TIME-CONVERSION-FORMAT seems to be the real problem.
					; I just turn it off completely for now.
    (defun auto::time-conversion-format (&rest foo)
    (declare (ignore foo))
      nil)

    (defun thm (name trm)
      (setq name (intern name))
      (let* ((trm trm)
	     (thm (getrwff trm)))
	(dolist (ax *axioms*)
	  (setq thm (acons 'IMPLIES ax thm)))
	(setf (get name 'thm-wff) thm)
	(prove2 thm name 100)
	(setq start (get-universal-time))
;	(set-flag 'use-diy t) ; to turn off translation to ND which is apparently buggy in cmucl! ; turned it back on after reassembling the rules - June 28, 2010, testing ND again since Cris Purdue did some work fixing the problems with tps in cmucl - Jan 2011
	(set-flag 'mating-verbose 'silent) ; to turn off the 'bell'
;	(pproof)
	(diy (numalias 100) nil nil)
	(if (proof-plans dproof)
	    (format t "--- TPS did not prove ~d using mode ~d. ---~%" name *modename*)
	  (format t "+++ TPS proved ~d using mode ~d in ~d seconds. +++~%" name *modename* (- (get-universal-time) start)))
	(quit)
	))

    (defun def-deps (m bvars)
      (if (boundwff-p m)
	  (def-deps (cdr m) (cons (caar m) bvars))
	(if (consp m)
	    (append (def-deps (car m) bvars)
		    (def-deps (cdr m) bvars))
	  (if (member m bvars)
	      nil
	    (list m)))))
    
					; if it is a definition of the form <symbol> = <term> where there is no circularity, make it a definition
					; this is the case for the 'axiom' declarations in setexample.thf
    (defun make-axiom-def (trm)
      (let ((sym nil))
	(if (equals-p trm)
	    (progn
	      (if (and (logconst-p (cdar trm))
		       (member (cdar trm) *consts*))
		  (setq sym (cdar trm))
		(when (and (symbolp (cdar trm)) (get (cdar trm) 'type))
		  (setq sym (getnameroot (cdar trm)))))
	      (if sym
		  (let ((deps (def-deps (cdr trm) nil)))
		    (if (or (member (cdar trm) deps) ; cyclic
			    (find-if #'(lambda (x) ; already used in some defn before defined (strong way to avoid cyclic defns)
					 (member (cdar trm) (cdr x))
					 )
				     *defdeps*
				     ))
			nil
		      (progn ; now make the abbrev
			(push (cons sym deps) *defdeps*)
			(setf (get sym 'type) (get (cdar trm) 'type))
			(setf (get sym 'typelist) nil)
			(setf (get sym 'defn) (cdr trm))
			(setf (get sym 'logconst) nil)
			(push sym global-abbrevlist)
			t)))
		nil))
	  nil)))
    
    (defun axiom (trm)
      (let ((trm (getrwff trm)))
	(unless (and *axioms-as-definitions*
		     (make-axiom-def trm))
	  (push trm *axioms*))))

    (defun valid-thf-input-p (r)
      (and (consp r)
	   (case (car r)
		 (CONST (and (consp (cdr r))
			     (stringp (cadr r))
			     (consp (cddr r))
			     (stringp (caddr r))
			     (null (cdddr r))))
		 (DEF (and (consp (cdr r))
			   (stringp (cadr r))
			   (consp (cddr r))
			   (stringp (caddr r))
			   (null (cdddr r))))
		 (AXIOM (and (consp (cdr r))
			     (stringp (cadr r))
			     (null (cddr r))))
		 (THM (and (consp (cdr r))
			   (stringp (cadr r))
			   (consp (cddr r))
			   (stringp (caddr r))
			   (null (cdddr r))))
		 (t nil))))

    (defun my-sigint (signal code scp)
      (declare (ignore code scp))
      (format t "Received signal ~d.~%Quitting!~%" signal)
      (quit)
      )

    (defun my-sigtstp (code scp)
      (declare (ignore code scp))
      (format t "Received signal ~d.~%Quitting!~%" signal)
      (quit)
      )

    (system:with-enabled-interrupts
     ((unix:sigint #'my-sigint)
      (unix:sigtstp #'my-sigtstp))
     (let ((f (open (cadr prob) :direction :input))
	   (r nil)
	   (ok nil))
       (loop while (setq r (read f nil nil)) do
	     (setq ok nil)
	     (when (valid-thf-input-p r)
               (catch 'fail (progn (eval r) (setq ok t)))
	       )
	     (unless (or ok skipillformed)
	       (format t "~%!!! Invalid Input !!!~%~d~%I Quit!~%" r)
	       (quit)))
       (quit))) ; Dec 2009, Chad
    ))

